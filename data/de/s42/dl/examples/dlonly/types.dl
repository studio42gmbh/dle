// Define enums and types

extern type de.s42.dl.types.ObjectDLType; 
extern type de.s42.dl.types.ClassDLType; 
extern type de.s42.dl.types.SymbolDLType; 
extern type de.s42.dl.types.StringDLType;
extern type de.s42.dl.types.IntegerDLType alias int;
extern type de.s42.dl.types.UUIDDLType;
extern type de.s42.dl.types.PathDLType;
extern type de.s42.dl.types.BooleanDLType alias boolean;
extern type de.s42.dl.types.ArrayDLType;
extern type de.s42.dl.types.ListDLType;
extern type de.s42.dl.types.MapDLType;

extern annotation de.s42.dl.annotations.DynamicDLAnnotation;
extern annotation de.s42.dl.annotations.RequiredDLAnnotation;
extern annotation de.s42.dl.annotations.LengthDLAnnotation;
extern annotation de.s42.dl.annotations.UniqueDLAnnotation;
extern annotation de.s42.dl.annotations.GenerateUUIDDLAnnotation;
extern annotation de.s42.dl.annotations.ContainDLAnnotation;
extern annotation de.s42.dl.annotations.IsFileDLAnnotation;
extern annotation de.s42.dl.annotations.ExportDLAnnotation;
extern annotation de.s42.dl.annotations.PreliminaryDLAnnotation;

pragma definePragma(de.s42.dl.pragmas.DisableDefineAnnotationsPragma);
pragma definePragma(de.s42.dl.pragmas.DisableDefinePragmasPragma);
pragma definePragma(de.s42.dl.pragmas.DisableDefineTypesPragma);
pragma definePragma(de.s42.dl.pragmas.DisableRequirePragma);

int b1 : 0b00000001;
int b2 : 0b00000010;
int b3 : 0b00000100;
int b4 : 0b00001000;
int b5 : 0b00010000;
int b6 : 0b00100000;
int b7 : 0b01000000;
int b8 : 0b10000000;

type FileFlags {
	int readable	: $b1;
	int writeable	: $b2;
	int symlink		: $b4;
	int slow		: $b6;
}

FileFlags fileFlags @export;

enum MemberStatus @preliminary
{
	Guest, Member, Gold, VIP
}

type Tagged extends Object
{
	Array<String> tags;
}

type Achievement extends Tagged
{
	Symbol hrid @required @length(3, 100) @unique;
	UUID id @required;

	// If for a certain reason (security, side effects) you can not map a class into DL
	List<Class> actions; 
}

type Media @dynamic extends Tagged
{
	String display @required @length(3, 100);
	Path path @required @isFile;
	UUID id @generateUUID @required;
	int flags;
}

type User @contain(Media, 0, 100) extends Object contains Media
{
	String login @required @length(3, 100) @unique;
	UUID id @generateUUID @required;
	boolean active : true;
	MemberStatus status : Guest;
	Array<Achievement> achievements;
	Map<String, Object> flexAttributes;
}

final type Configuration @contain(User, 1, 3) extends Object contains User alias Config
{
	boolean debug : false;
}


// Disallow definitions and requiring in data section

pragma disableDefineTypes;
pragma disableDefineAnnotations;
pragma disableDefinePragmas;